{"version":3,"sources":["userPanel.js","Transactions.js","Contacts.js","Supervisors.js","App.js","serviceWorker.js","index.js"],"names":["Logout","props","state","showModal","open","bind","close","onValueChanged","logout","key","value","this","setState","dialogError","undefined","appOnValueChanged","id","Button","onClick","Dialog","onClose","aria-labelledby","maxWidth","fullWidth","DialogTitle","DialogContent","DialogActions","color","React","Component","Login","email","password","login","call","action","arguments","callStr","JSON","stringify","request","XMLHttpRequest","onreadystatechange","readyState","status","response","parse","responseText","result","send","message","Box","m","component","display","TextField","label","onChange","e","target","type","style","errorMessage","UserPanel","loggedUser","p","bgcolor","css","float","TransactionBody","iban","amount","CreateTransaction","create","console","log","variant","text","Transactions","body","transactions","map","transaction","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","classes","layout","gridTemplateColumns","Typography","incoming","dateProccess","ExpansionPanelDetails","accountId","approved","dateCreate","dateApproved","ExpansionPanelActions","TransactionPanel","Grid","container","spacing","item","xs","ContactBody","name","CreateContact","DeleteContact","delete","contact","Contacts","contacts","ContactPanel","Supervisors","supervisors","supervisor","surname","mail","phoneNumber","SupervisorPanel","menu","App","page","online","dateConf","className","AppBar","position","Tabs","aria-label","event","Tab","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a33712bb.chunk.js","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\n\nclass Logout extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.logout = this.logout.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    logout() {\n        this.props.appOnValueChanged(\"loggedUser\", undefined);\n    }\n\n    render() {\n        const id = this.props.id + \"-logout\";\n\n        return (\n            <>\n                <Button onClick={this.open}>\n                    Logout\n                </Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-dialog\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-dialog-title\"}>Logout</DialogTitle>\n                    <DialogContent>\n                        Do you really wish to logout?\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            Close\n                        </Button>\n                        <Button id={id + \"-action-edit-profile\"} onClick={this.logout} color=\"primary\">\n                            Logout\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport class Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n            email: \"\",\n            password: \"\"\n        };\n\n        this.open = this.open.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.login = this.login.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    login() {\n        const onValueChanged = this.onValueChanged;\n        const appOnValueChanged = this.props.appOnValueChanged;\n        const { email, password } = this.state;\n        const data = { email, password };\n        const call = {\n            action: \"login\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n\n        const request= new XMLHttpRequest();\n        request.onreadystatechange = function() {\n            if (this.readyState === 4 && this.status === 200) {\n                const response = JSON.parse(this.responseText);\n\n                if (response.result && response.result !== \"Error\") {\n                    const data = { email };\n                    const call = {\n                        action: \"getPlayer\",\n                        arguments: data\n                    };\n                    const callStr = JSON.stringify(call);\n                    const request= new XMLHttpRequest();\n                    request.onreadystatechange = function() {\n                        if (this.readyState === 4 && this.status === 200) {\n                            const response = JSON.parse(this.responseText);\n\n                            appOnValueChanged(\"loggedUser\", response[0]);\n                        }\n                    }\n                    request.open(\"POST\", \"https://cors-anywhere.herokuapp.com/http://www.stud.fit.vutbr.cz/~xholas09/IIS/backend_api.php\", true);\n                    //request.setRequestHeader(\"Content-type\", \"application/json\");\n                    request.send(callStr);\n                } else\n                    onValueChanged(\"errorMessage\", response.message);\n            }\n        }\n        request.open(\"POST\", \"https://cors-anywhere.herokuapp.com/http://www.stud.fit.vutbr.cz/~xholas09/IIS/backend_api.php\", true);\n        //request.setRequestHeader(\"Content-type\", \"application/json\");\n        request.send(callStr);\n    }\n\n    render() {\n        const id = this.props.id + \"-login\";\n        return (\n            <>\n                <Button onClick={this.open}>\n                    Login\n                </Button>\n                <Dialog open={this.state.showModal}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>User Login</DialogTitle>\n                    <DialogContent>\n                        <Box m={1} component=\"span\" display=\"block\">\n                            <TextField id={id + \"-email\"}\n                                label=\"Email\"\n                                value={this.state.email}\n                                onChange={e => this.onValueChanged(\"email\", e.target.value)}\n                                fullWidth\n                            />\n                        </Box>\n                        <Box m={1} component=\"span\" display=\"block\">\n                            <TextField id={id + \"-password\"}\n                                label=\"Password\"\n                                value={this.state.password}\n                                onChange={e => this.onValueChanged(\"password\", e.target.value)}\n                                type=\"password\"\n                                fullWidth\n                            />\n                        </Box>\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-login\"} onClick={this.login} color=\"primary\">\n                            Login\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport const UserPanel = ({ appOnValueChanged, loggedUser }) => {\n    const id = \"user-panel\";\n\n    return (\n        <Box display=\"flex\" m={1} p={1} bgcolor=\"background.paper\" css={{ float: \"right\" }}>\n            <Logout id={id} appOnValueChanged={appOnValueChanged} />\n        </Box>\n    );\n}\n","import React from 'react';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nimport './styles.css';\n\nconst TransactionBody = ({ id, state, onValueChanged }) => {\n    return (<>\n        <Box m={1} component=\"span\" display=\"block\">\n            <TextField id={id + \"-iban\"}\n                label=\"IBAN\"\n                value={state.iban}\n                onChange={e => onValueChanged(\"iban\", e.target.value)}\n                fullWidth\n                />\n        </Box>\n        <Box m={1} component=\"span\" display=\"block\">\n            <TextField id={id + \"-amount\"}\n                label=\"Amount\"\n                value={state.amount}\n                onChange={e => onValueChanged(\"amount\", e.target.value)}\n                type=\"number\"\n                fullWidth\n            />\n        </Box>\n    </>);\n}\n\nexport class CreateTransaction extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n            iban: props.iban ? props.iban : \"\",\n            amount: props.amount ? props.amount : 0,\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.create = this.create.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    create() {\n        const { iban, amount } = this.state;\n        const data = { iban, amount };\n        const call = {\n            action: \"createTransaction\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n        console.log(callStr);\n    }\n\n    render() {\n        const id = \"create\";\n        return (\n            <>\n                <Button onClick={this.open} variant=\"contained\" color=\"primary\">{this.props.text}</Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>{this.props.text}</DialogTitle>\n                    <DialogContent>\n                        <TransactionBody id={id}\n                            state={this.state}\n                            onValueChanged={this.onValueChanged} />\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            Close\n                        </Button>\n                        <Button id={id + \"-action-create\"} onClick={this.create} color=\"primary\">\n                            Create\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport class Transactions extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    render() {\n        const TransactionPanel = (transaction) => {\n            return (\n                <ExpansionPanel key={transaction.iban}>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                    classes={{layout:\"grid\", gridTemplateColumns: \"100px 300px 100px\"}}\n                  >\n                      <Typography>{ (transaction.incoming === \"I\" ? \"\" : \"-\") + transaction.amount + \"eur\" }</Typography>\n                      <Typography>{ transaction.iban }</Typography>\n                      <Typography>{ transaction.dateProccess }</Typography>\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                      <table id=\"my-table\">\n                        <tbody>\n                            <tr>\n                              <th></th>\n                              <th></th>\n                              <th></th>\n                            </tr>\n                            <tr>\n                              <td><b>Type:</b> { transaction.incoming === \"I\" ? \"Incoming\" : \"Outgoing\" }</td>\n                              <td><b>Amount:</b> { transaction.amount + \"eur\" }</td>\n                              <td><b>Online:</b> { \"Online transaction\" }</td>\n                            </tr>\n                            <tr>\n                              <td><b>Sender:</b> { transaction.iban }</td>\n                              <td><b>Receiver:</b> { transaction.accountId }</td>\n                              <td><b>Approved by:</b> { transaction.approved }</td>\n                            </tr>\n                            <tr>\n                              <td><b>Transaction created:</b> { transaction.dateCreate }</td>\n                              <td><b>Transaction approved:</b> { transaction.dateApproved }</td>\n                              <td><b>Transaction proccessed:</b> { transaction.dateProccess }</td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </ExpansionPanelDetails>\n                  <ExpansionPanelActions>\n                      <CreateTransaction iban={transaction.iban} amount={transaction.amount} text={transaction.incoming === \"O\" ? \"Repeat Transaction\" : \"Respond\"} />\n                  </ExpansionPanelActions>\n                </ExpansionPanel>\n            );\n        };\n\n        const body = this.props.transactions.map(transaction => TransactionPanel(transaction));\n\n        return(\n            <Grid container spacing={3}>\n                {this.props.loggedUser &&\n                <Grid item xs={12}>\n                    <Box display=\"flex\" css={{ float: \"right\" }}>\n                        <CreateTransaction loggedUser={this.props.loggedUser} appOnValueChanged={this.props.appOnValueChanged} text=\"Make a Transaction\"/>\n                    </Box>\n                </Grid>}\n                <Grid item xs={12}>\n                    { body }\n                </Grid>\n            </Grid>\n        );\n    };\n}\n","import React from 'react';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nimport { CreateTransaction } from './Transactions.js';\n\nimport './styles.css';\n\nconst ContactBody = ({ id, state, onValueChanged }) => {\n    return (<>\n        <Box m={1} component=\"span\" display=\"block\">\n            <TextField id={id + \"-name\"}\n                label=\"Name\"\n                value={state.name}\n                onChange={e => onValueChanged(\"name\", e.target.value)}\n                fullWidth\n                />\n        </Box>\n        <Box m={1} component=\"span\" display=\"block\">\n            <TextField id={id + \"-iban\"}\n                label=\"IBAN\"\n                value={state.iban}\n                onChange={e => onValueChanged(\"iban\", e.target.value)}\n                fullWidth\n                />\n        </Box>\n    </>);\n}\n\nclass CreateContact extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n            name: \"\",\n            iban: \"\",\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.create = this.create.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    create() {\n        const { name, iban} = this.state;\n        const data = { name, iban };\n        const call = {\n            action: \"createContact\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n        console.log(\"CreateContact\", callStr);\n    }\n\n    render() {\n        const id = \"create\";\n        return (\n            <>\n                <Button onClick={this.open} variant=\"contained\" color=\"primary\">Create Contact</Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>Create Contact</DialogTitle>\n                    <DialogContent>\n                        <ContactBody id={id}\n                            state={this.state}\n                            onValueChanged={this.onValueChanged} />\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            Close\n                        </Button>\n                        <Button id={id + \"-action-create\"} onClick={this.create} color=\"primary\">\n                            Create\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nclass DeleteContact extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.delete = this.delete.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    delete() {\n        const data = { iban: this.props.contact.iban, name: this.props.contact.name };\n        const call = {\n            action: \"deleteContact\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n        console.log(\"Delete Contact API:\", callStr);\n    }\n\n    render() {\n        const id = this.props.contact.id + \"-delete\";\n        return (\n            <>\n                <Button onClick={this.open} variant=\"contained\" color=\"secondary\">Delete</Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>Delete Contact</DialogTitle>\n                    <DialogContent>\n                        Delete this contact?\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            Close\n                        </Button>\n                        <Button id={id + \"-action-delete\"} onClick={this.delete} color=\"secondary\">\n                            Delete\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport default class Contacts extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    render() {\n        const ContactPanel = (contact) => {\n            return (\n                <ExpansionPanel key={ contact.name }>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                  >\n                      { contact.name }\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                      <table id=\"my-table\">\n                        <tbody>\n                            <tr>\n                              <th></th>\n                            </tr>\n                            <tr>\n                              <td><b>IBAN:</b> { contact.iban }</td>\n                              <td><b>Name:</b> { contact.name }</td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </ExpansionPanelDetails>\n                  <ExpansionPanelActions>\n                      <CreateTransaction iban={contact.iban} amount={0} text=\"Make a Transcation\" />\n                      <DeleteContact contact={contact} loggedUser={this.props.loggedUser} appOnValueChanged={this.props.appOnValueChanged}/>\n                  </ExpansionPanelActions>\n                </ExpansionPanel>\n            );\n        };\n\n        const body = this.props.contacts.map(contact => ContactPanel(contact));\n\n        return (\n            <Grid container spacing={3}>\n                {this.props.loggedUser &&\n                <Grid item xs={12}>\n                    <Box display=\"flex\" css={{ float: \"right\" }}>\n                        <CreateContact loggedUser={this.props.loggedUser} appOnValueChanged={this.props.appOnValueChanged} />\n                    </Box>\n                </Grid>}\n                <Grid item xs={12}>\n                    { body }\n                </Grid>\n            </Grid>\n        );\n    };\n}\n","import React from 'react';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport './styles.css';\n\nexport default class Supervisors extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    render() {\n        const SupervisorPanel = (supervisor) => {\n            return (\n                <ExpansionPanel key={supervisor.surname + supervisor.name}>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                  >\n                      { supervisor.name + \" \" + supervisor.surname }\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                      <table id=\"my-table\">\n                        <tbody>\n                            <tr>\n                              <th></th>\n                              <th></th>\n                              <th></th>\n                            </tr>\n                            <tr>\n                              <td><b>Name:</b> { supervisor.name }</td>\n                              <td><b>Surname:</b> { supervisor.surname }</td>\n                            </tr>\n                            <tr>\n                              <td><b>Email:</b> { supervisor.mail }</td>\n                              <td><b>Phone number:</b> { supervisor.phoneNumber }</td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </ExpansionPanelDetails>\n                </ExpansionPanel>\n            );\n        };\n\n        const body = this.props.supervisors.map(supervisor => SupervisorPanel(supervisor));\n\n        return(\n            <>\n                { body }\n            </>\n        );\n    };\n}\n","import React from 'react';\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { UserPanel, Login } from './userPanel.js';\nimport { Transactions } from './Transactions.js';\nimport Contacts from './Contacts.js';\nimport Supervisors from './Supervisors.js';\n\nconst menu = { // index of menu items\n    TRANSACTIONS: 0,\n    CONTACTS: 1,\n    SUPERVISORS: 2,\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            loggedUser: {\n                name: \"tmp\",\n                transactions: [\n                    {\n                        dateCreate: \"20-10-2019\",\n                        dateProccess: \"22-10-2019\",\n                        amount: \"200\",\n                        online: \"TODO\",\n                        dateConf: \"21-10-2019\",\n                        incoming: \"I\",\n                        accountId: \"SK02602020000000008342\",\n                        iban: \"SK32141943292843294\"\n                    },\n                    {\n                        dateCreate: \"25-10-2019\",\n                        dateProccess: \"26-10-2019\",\n                        amount: \"400\",\n                        online: \"TODO\",\n                        dateConf: \"25-10-2019\",\n                        incoming: \"O\",\n                        accountId: \"SK02602020000000008342\",\n                        iban: \"SK32141943292843294\"\n                    },\n                    {\n                        dateCreate: \"30-10-2019\",\n                        dateProccess: \"2-11-2019\",\n                        amount: \"780\",\n                        online: \"TODO\",\n                        dateConf: \"2-11-2019\",\n                        incoming: \"I\",\n                        accountId: \"SK02602020000000008342\",\n                        iban: \"SK32141943292843294\"\n                    },\n                ],\n                contacts: [\n                    {\n                        name: \"Michal Zelenak\",\n                        iban: \"SK32141943292843294\"\n                    },\n                    {\n                        name: \"Jurij Gagarin\",\n                        iban: \"SK98765432100000000\"\n                    },\n                    {\n                        name: \"Majka Pajka\",\n                        iban: \"SK00000000000000001\"\n                    },\n                ],\n                supervisors: [\n                    {\n                        name: \"Michal\",\n                        surname: \"Zelenak\",\n                        mail: \"michalzelenak@gmail.com\",\n                        phoneNumber: \"+420854398148\"\n                    },\n                    {\n                        name: \"Jurko\",\n                        surname: \"Murko\",\n                        mail: \"juro@gmail.com\",\n                        phoneNumber: \"+420854398148\"\n                    },\n                    {\n                        name: \"Majka\",\n                        surname: \"Pajka\",\n                        mail: \"whatevermail@gmail.com\",\n                        phoneNumber: \"+420854398148\"\n                    },\n                ]\n            },\n            transactions: [],\n        };\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    componentDidMount() {\n\n        // const onValueChanged = this.onValueChanged;\n        let request= new XMLHttpRequest();\n        request.onreadystatechange = function() {\n            if (this.readyState === 4 && this.status === 200) {\n                console.log(\"RETURNED:\", this.responseText);\n                // const supervisors = JSON.parse(this.responseText);\n                // onValueChanged(\"supervisors\", supervisors);\n            }\n        }\n        request.open(\"POST\", \"http://itu1.epizy.com/php/backend_api.php\", true);\n        console.log('SEND REQUEST: {\"action\":\"login\",\"arguments\":{\"email\":\"example@ex.com\",\"password\":\"Hackthis\"}}');\n        request.send('{\"action\":\"login\",\"arguments\":{\"email\":\"example@ex.com\",\"password\":\"Hackthis\"}}');\n    }\n\n    render() {\n        const { loggedUser, page} = this.state;\n\n        console.log(this.state);\n        return (\n            <div className=\"App\">\n                <Login id=\"login\" appOnValueChanged={this.onValueChanged} />\n                <>\n                    <div>\n                        <AppBar position=\"static\">\n                            <Tabs aria-label=\"menu\"\n                                onChange={(event, value) => this.onValueChanged(\"page\", value)}\n                                value={page}\n                            >\n                                <Tab label=\"Transactions\" />\n                                <Tab label=\"Contacts\" />\n                                <Tab label=\"Supervisors\" />\n                            </Tabs>\n                        </AppBar>\n                        <UserPanel appOnValueChanged={this.onValueChanged} loggedUser={loggedUser} />\n                    </div>\n                    <header className=\"App-page\">\n                        <div className=\"App-content\">\n                            { page === menu.TRANSACTIONS && <Transactions transactions={loggedUser.transactions} loggedUser={loggedUser} appOnValueChanged={this.onValueChanged} /> }\n                            { page === menu.CONTACTS && <Contacts contacts={loggedUser.contacts} loggedUser={loggedUser} appOnValueChanged={this.onValueChanged} /> }\n                            { page === menu.SUPERVISORS && <Supervisors supervisors={loggedUser.supervisors} loggedUser={loggedUser} appOnValueChanged={this.onValueChanged} /> }\n                        </div>\n                    </header>\n                </>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}