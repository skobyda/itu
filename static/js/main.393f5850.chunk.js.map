{"version":3,"sources":["userPanel.js","Transactions.js","Contacts.js","Supervisors.js","App.js","serviceWorker.js","index.js"],"names":["Logout","props","state","showModal","open","bind","close","onValueChanged","logout","key","value","this","setState","dialogError","undefined","appOnValueChanged","id","Button","onClick","className","Dialog","onClose","aria-labelledby","maxWidth","fullWidth","DialogTitle","DialogContent","DialogActions","color","React","Component","Login","email","password","login","name","iban","balance","transactions","dateCreate","dateProccess","amount","online","dateConf","incoming","accountId","approved","contacts","supervisors","surname","mail","phoneNumber","Box","m","component","display","TextField","label","onChange","e","target","type","style","errorMessage","UserPanel","loggedUser","p","bgcolor","css","float","TransactionBody","CreateTransaction","create","call","action","arguments","callStr","JSON","stringify","console","log","d","Date","newTransactions","push","getDate","getMonth","getFullYear","confirmed","variant","text","Transactions","body","reverse","map","transaction","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","classes","layout","gridTemplateColumns","width","marginRight","ExpansionPanelDetails","dateApproved","ExpansionPanelActions","TransactionPanel","Grid","container","spacing","item","xs","CreateContact","newContacts","DeleteContact","delete","data","contact","index","indexOf","c","splice","Contacts","ContactPanel","Supervisors","supervisor","SupervisorPanel","menu","App","page","request","XMLHttpRequest","onreadystatechange","readyState","status","responseText","send","AppBar","position","Tabs","aria-label","event","Tab","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.393f5850.chunk.js","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\n\nclass Logout extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.logout = this.logout.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    logout() {\n        this.props.appOnValueChanged(\"loggedUser\", undefined);\n    }\n\n    render() {\n        const id = this.props.id + \"-logout\";\n\n        return (\n            <>\n                <Button onClick={this.open}>\n                    <span className=\"my-button\">\n                        Logout\n                    </span>\n                </Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-dialog\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-dialog-title\"}>Logout</DialogTitle>\n                    <DialogContent>\n                        Do you really wish to logout?\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            <span className=\"my-button\">\n                                Close\n                            </span>\n                        </Button>\n                        <Button id={id + \"-action-edit-profile\"} onClick={this.logout} color=\"primary\">\n                            <span className=\"my-button\">\n                                Logout\n                            </span>\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport class Login extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\"\n        };\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.login = this.login.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    login() {\n        const onValueChanged = this.onValueChanged;\n        const appOnValueChanged = this.props.appOnValueChanged;\n        const { email, password } = this.state;\n        const data = { email, password };\n        /* const call = {\n            action: \"login\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call); */\n        // TODO replace dummy data with backend\n\n        if (data.email === \"simon.kobyda@gmail.com\" && password === \"123456789\") {\n            const loggedUser = {\n                name: \"Simon Kobyda\",\n                iban: \"SK02602020000000008342\",\n                balance: 10250,\n                transactions: [\n                    {\n                        dateCreate: \"20-10-2019\",\n                        dateProccess: \"22-10-2019\",\n                        amount: \"200\",\n                        online: \"TODO\",\n                        dateConf: \"21-10-2019\",\n                        incoming: \"I\",\n                        accountId: \"SK02602020000000008342\",\n                        approved: true,\n                        iban: \"SK32141943292843294\",\n                    },\n                    {\n                        dateCreate: \"25-10-2019\",\n                        dateProccess: \"26-10-2019\",\n                        amount: \"400\",\n                        online: \"TODO\",\n                        dateConf: \"25-10-2019\",\n                        incoming: \"O\",\n                        accountId: \"SK02602020000000008342\",\n                        approved: true,\n                        iban: \"SK32141943292843294\"\n                    },\n                    {\n                        dateCreate: \"30-10-2019\",\n                        dateProccess: \"2-11-2019\",\n                        amount: \"780\",\n                        online: \"TODO\",\n                        dateConf: \"2-11-2019\",\n                        incoming: \"I\",\n                        accountId: \"SK02602020000000008342\",\n                        approved: true,\n                        iban: \"SK32141943292843294\"\n                    },\n                ],\n                contacts: [\n                    {\n                        name: \"Michal Zelenak\",\n                        iban: \"SK32141943292843294\"\n                    },\n                    {\n                        name: \"Jurij Gagarin\",\n                        iban: \"SK98765432100000000\"\n                    },\n                    {\n                        name: \"Majka Pajka\",\n                        iban: \"SK00000000000000001\"\n                    },\n                ],\n                supervisors: [\n                    {\n                        name: \"Michal\",\n                        surname: \"Zelenak\",\n                        mail: \"michalzelenak@gmail.com\",\n                        phoneNumber: \"+420854398148\"\n                    },\n                    {\n                        name: \"Jurko\",\n                        surname: \"Murko\",\n                        mail: \"juro@gmail.com\",\n                        phoneNumber: \"+420854398148\"\n                    },\n                    {\n                        name: \"Majka\",\n                        surname: \"Pajka\",\n                        mail: \"whatevermail@gmail.com\",\n                        phoneNumber: \"+420854398148\"\n                    },\n                ]\n            };\n\n            appOnValueChanged(\"loggedUser\", loggedUser);\n        } else {\n            onValueChanged(\"errorMessage\", \"Incorrect email or password\");\n        }\n    }\n\n    render() {\n        const id = this.props.id + \"-login\";\n        return (\n            <Dialog aria-labelledby={id + \"-modal\"}\n                maxWidth={'sm'}\n                fullWidth\n                open >\n                <DialogTitle id={id + \"-modal-title\"}>User Login</DialogTitle>\n                <DialogContent>\n                    <Box m={1} component=\"span\" display=\"block\">\n                        <TextField id={id + \"-email\"}\n                            label=\"Email\"\n                            value={this.state.email}\n                            onChange={e => this.onValueChanged(\"email\", e.target.value)}\n                            fullWidth\n                        />\n                    </Box>\n                    <Box m={1} component=\"span\" display=\"block\">\n                        <TextField id={id + \"-password\"}\n                            label=\"Password\"\n                            value={this.state.password}\n                            onChange={e => this.onValueChanged(\"password\", e.target.value)}\n                            type=\"password\"\n                            fullWidth\n                        />\n                    </Box>\n                    <span style={{ color: \"red\" }}>\n                        { this.state.errorMessage && (<br />) }\n                        { this.state.errorMessage }\n                    </span>\n                </DialogContent>\n                <DialogActions>\n                    <Button id={id + \"-action-login\"} onClick={this.login} color=\"primary\">\n                        <span className=\"my-button\">\n                            Login\n                        </span>\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nexport const UserPanel = ({ appOnValueChanged, loggedUser }) => {\n    const id = \"user-panel\";\n\n    return (\n        <Box display=\"flex\" m={1} p={1} bgcolor=\"background.paper\" css={{ float: \"right\" }}>\n            <Logout id={id} appOnValueChanged={appOnValueChanged} />\n        </Box>\n    );\n}\n","// Author: Simon Kobyda, xkobyd00\n\nimport React from 'react';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nimport './styles.css';\n\nconst TransactionBody = ({ id, state, onValueChanged }) => {\n    return (<>\n        <Box m={1} component=\"span\" display=\"block\">\n            <TextField id={id + \"-iban\"}\n                label=\"IBAN\"\n                value={state.iban}\n                onChange={e => onValueChanged(\"iban\", e.target.value)}\n                fullWidth\n                />\n        </Box>\n        <Box m={1} component=\"span\" display=\"block\">\n            <TextField id={id + \"-amount\"}\n                label=\"Amount\"\n                value={state.amount}\n                onChange={e => onValueChanged(\"amount\", e.target.value)}\n                type=\"number\"\n                fullWidth\n            />\n        </Box>\n    </>);\n}\n\nexport class CreateTransaction extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n            iban: props.iban ? props.iban : \"\",\n            amount: props.amount ? props.amount : 0,\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.create = this.create.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    create() {\n        const loggedUser = this.props.loggedUser;\n        const appOnValueChanged = this.props.appOnValueChanged;\n\n        const { iban, amount } = this.state;\n        const data = { iban, amount };\n        const call = {\n            action: \"createTransaction\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n        console.log(callStr);\n\n        const d = new Date();\n        const newTransactions = [...loggedUser.transactions];\n        newTransactions.push({\n            dateCreate: d.getDate() + d.getMonth + d.getFullYear,\n            amount: amount,\n            incoming: \"O\",\n            accountId: loggedUser.iban,\n            iban: iban,\n            confirmed: false\n        });\n        loggedUser.transactions = newTransactions;\n        appOnValueChanged(\"loggedUser\", loggedUser);\n    }\n\n    render() {\n        const id = \"create\";\n        return (\n            <>\n                <Button onClick={this.open} variant=\"contained\" color=\"primary\"><span className=\"my-button\">{this.props.text}</span></Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>{this.props.text}</DialogTitle>\n                    <DialogContent>\n                        <TransactionBody id={id}\n                            state={this.state}\n                            onValueChanged={this.onValueChanged} />\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            <span className=\"my-button\">\n                                Close\n                            </span>\n                        </Button>\n                        <Button id={id + \"-action-create\"} onClick={this.create} color=\"primary\">\n                            <span className=\"my-button\">\n                                Create\n                            </span>\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport class Transactions extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    render() {\n        const TransactionPanel = (transaction) => {\n            return (\n                <ExpansionPanel key={transaction.iban}>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                    classes={{layout:\"grid\", gridTemplateColumns: \"100px 300px 100px\"}}\n                  >\n                      <span style={transaction.incoming === \"I\" ? {width:\"0.7em\"} : {width:\"0.7em\",color:\"red\"}}>{ (transaction.incoming === \"I\" ? \" \" : \"-\") }</span>\n                      <span style={transaction.incoming === \"I\" ? {marginRight:\"10em\"} : {marginRight:\"10em\",color:\"red\"}}>{ transaction.amount + \"eur\" }</span>\n                      <span style={{marginRight:\"10em\"}}>{ transaction.iban }</span>\n                      <span>{transaction.approved ? transaction.dateProccess : \"Waiting for approval\" }</span>\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                      <table id=\"my-table\">\n                        <tbody>\n                            <tr>\n                              <th></th>\n                              <th></th>\n                              <th></th>\n                            </tr>\n                            <tr>\n                              <td><b>Type:</b> { transaction.incoming === \"I\" ? \"Incoming\" : \"Outgoing\" }</td>\n                              <td><b>Amount:</b> { transaction.amount + \"eur\" }</td>\n                              <td><b>Online:</b> { \"Online transaction\" }</td>\n                            </tr>\n                            <tr>\n                              <td><b>Sender:</b> { transaction.iban }</td>\n                              <td><b>Receiver:</b> { transaction.accountId }</td>\n                              <td><b>Approved by:</b> { transaction.approved }</td>\n                            </tr>\n                            <tr>\n                              <td><b>Transaction created:</b> { transaction.dateCreate }</td>\n                              <td><b>Transaction approved:</b> { transaction.dateApproved }</td>\n                              <td><b>Transaction proccessed:</b> { transaction.dateProccess }</td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </ExpansionPanelDetails>\n                  <ExpansionPanelActions>\n                      <CreateTransaction loggedUser={this.props.loggedUser} iban={transaction.iban} amount={transaction.amount} text={transaction.incoming === \"O\" ? \"Repeat Transaction\" : \"Respond\"} appOnValueChanged={this.props.appOnValueChanged} />\n                  </ExpansionPanelActions>\n                </ExpansionPanel>\n            );\n        };\n\n        const body = this.props.transactions.reverse().map(transaction => TransactionPanel(transaction));\n\n        return(\n            <Grid container spacing={3}>\n                {this.props.loggedUser &&\n                <Grid item xs={12}>\n                    <Box display=\"flex\" css={{ float: \"right\" }}>\n                        <CreateTransaction loggedUser={this.props.loggedUser} appOnValueChanged={this.props.appOnValueChanged} text=\"Make a Transaction\"/>\n                    </Box>\n                </Grid>}\n                <Grid item xs={12}>\n                    { body }\n                </Grid>\n            </Grid>\n        );\n    };\n}\n","// Author: Michal Zelenak, xzelen24\n\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nimport { CreateTransaction } from './Transactions.js';\n\nimport './styles.css';\n\nclass CreateContact extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n            name: \"\",\n            iban: \"\",\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.create = this.create.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    create() {\n        const loggedUser = this.props.loggedUser;\n        const appOnValueChanged = this.props.appOnValueChanged;\n\n        const { name, iban} = this.state;\n        const data = { name, iban };\n        const call = {\n            action: \"createContact\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n        console.log(\"CreateContact\", callStr);\n\n        const newContacts = [...loggedUser.contacts];\n        newContacts.push({\n            name,\n            iban\n        });\n        loggedUser.contacts = newContacts;\n        appOnValueChanged(\"loggedUser\", loggedUser);\n    }\n\n    render() {\n        const id = \"create\";\n        return (\n            <>\n                <Button onClick={this.open} variant=\"contained\" color=\"primary\"><span className=\"my-button\">Create Contact</span></Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>Create Contact</DialogTitle>\n                    <DialogContent>\n                        <Box m={1} component=\"span\" display=\"block\">\n                            <TextField id={id + \"-name\"}\n                                label=\"Name\"\n                                value={this.state.name}\n                                onChange={e => this.onValueChanged(\"name\", e.target.value)}\n                                fullWidth\n                                />\n                        </Box>\n                        <Box m={1} component=\"span\" display=\"block\">\n                            <TextField id={id + \"-iban\"}\n                                label=\"IBAN\"\n                                value={this.state.iban}\n                                onChange={e => this.onValueChanged(\"iban\", e.target.value)}\n                                fullWidth\n                                />\n                        </Box>\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            <span className=\"my-button\">\n                                Close\n                            </span>\n                        </Button>\n                        <Button id={id + \"-action-create\"} onClick={this.create} color=\"primary\">\n                            <span className=\"my-button\">\n                                Create\n                            </span>\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nclass DeleteContact extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showModal: false,\n        };\n\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.onValueChanged = this.onValueChanged.bind(this);\n        this.delete = this.delete.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    close() {\n        this.setState({ showModal: false, dialogError: undefined });\n    }\n\n    open() {\n        this.setState({ showModal: true });\n    }\n\n    delete() {\n        const loggedUser = this.props.loggedUser;\n        const appOnValueChanged = this.props.appOnValueChanged;\n\n        const data = { iban: this.props.contact.iban, name: this.props.contact.name };\n        const call = {\n            action: \"deleteContact\",\n            arguments: data\n        };\n        const callStr = JSON.stringify(call);\n        console.log(\"Delete Contact API:\", callStr);\n\n        const newContacts = [...loggedUser.contacts];\n        const index = newContacts.indexOf(c => c.iban === data.iban);\n        newContacts.splice(index, 1);\n\n        loggedUser.contacts = newContacts;\n        appOnValueChanged(\"loggedUser\", loggedUser);\n    }\n\n    render() {\n        const id = this.props.contact.id + \"-delete\";\n        return (\n            <>\n                <Button onClick={this.open} variant=\"contained\" color=\"secondary\"><span className=\"my-button\">Delete</span></Button>\n                <Dialog open={this.state.showModal}\n                    onClose={this.close}\n                    aria-labelledby={id + \"-modal\"}\n                    maxWidth={'sm'}\n                    fullWidth\n                >\n                    <DialogTitle id={id + \"-modal-title\"}>Delete Contact</DialogTitle>\n                    <DialogContent>\n                        Delete this contact?\n                        <span style={{ color: \"red\" }}>\n                            { this.state.errorMessage && (<br />) }\n                            { this.state.errorMessage }\n                        </span>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button id={id + \"-action-close\"} onClick={this.close} color=\"default\">\n                            <span className=\"my-button\">\n                                Close\n                            </span>\n                        </Button>\n                        <Button id={id + \"-action-delete\"} onClick={this.delete} color=\"secondary\">\n                            <span className=\"my-button\">\n                                Delete\n                            </span>\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nexport default class Contacts extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    render() {\n        const ContactPanel = (contact) => {\n            return (\n                <ExpansionPanel key={ contact.name }>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                  >\n                      { contact.name }\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                      <table id=\"my-table\">\n                        <tbody>\n                            <tr>\n                              <th></th>\n                            </tr>\n                            <tr>\n                              <td><b>IBAN:</b> { contact.iban }</td>\n                              <td><b>Name:</b> { contact.name }</td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </ExpansionPanelDetails>\n                  <ExpansionPanelActions>\n                      <CreateTransaction iban={contact.iban} amount={0} text=\"Make a Transcation\" />\n                      <DeleteContact contact={contact} loggedUser={this.props.loggedUser} appOnValueChanged={this.props.appOnValueChanged}/>\n                  </ExpansionPanelActions>\n                </ExpansionPanel>\n            );\n        };\n\n        const body = this.props.contacts.map(contact => ContactPanel(contact));\n\n        return (\n            <Grid container spacing={3}>\n                {this.props.loggedUser &&\n                <Grid item xs={12}>\n                    <Box display=\"flex\" css={{ float: \"right\" }}>\n                        <CreateContact loggedUser={this.props.loggedUser} appOnValueChanged={this.props.appOnValueChanged} />\n                    </Box>\n                </Grid>}\n                <Grid item xs={12}>\n                    { body }\n                </Grid>\n            </Grid>\n        );\n    };\n}\n","// Author: Simon Kobyda, xkobyd00\nimport React from 'react';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport './styles.css';\n\nexport default class Supervisors extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    render() {\n        const SupervisorPanel = (supervisor) => {\n            return (\n                <ExpansionPanel key={supervisor.surname + supervisor.name}>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1c-content\"\n                    id=\"panel1c-header\"\n                  >\n                      { supervisor.name + \" \" + supervisor.surname }\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                      <table id=\"my-table\">\n                        <tbody>\n                            <tr>\n                              <th></th>\n                              <th></th>\n                              <th></th>\n                            </tr>\n                            <tr>\n                              <td><b>Name:</b> { supervisor.name }</td>\n                              <td><b>Surname:</b> { supervisor.surname }</td>\n                            </tr>\n                            <tr>\n                              <td><b>Email:</b> { supervisor.mail }</td>\n                              <td><b>Phone number:</b> { supervisor.phoneNumber }</td>\n                            </tr>\n                        </tbody>\n                      </table>\n                  </ExpansionPanelDetails>\n                </ExpansionPanel>\n            );\n        };\n\n        const body = this.props.supervisors.map(supervisor => SupervisorPanel(supervisor));\n\n        return(\n            <>\n                { body }\n            </>\n        );\n    };\n}\n","// Author: Simon Kobyda, xkobyd00\nimport React from 'react';\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { UserPanel, Login } from './userPanel.js';\nimport { Transactions } from './Transactions.js';\nimport Contacts from './Contacts.js';\nimport Supervisors from './Supervisors.js';\n\nconst menu = { // index of menu items\n    TRANSACTIONS: 0,\n    CONTACTS: 1,\n    SUPERVISORS: 2,\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            loggedUser: undefined,\n            transactions: [],\n        };\n\n        this.onValueChanged = this.onValueChanged.bind(this);\n    }\n\n    onValueChanged(key, value) {\n        this.setState({ [key]: value });\n    }\n\n    componentDidMount() {\n\n        // const onValueChanged = this.onValueChanged;\n        let request= new XMLHttpRequest();\n        request.onreadystatechange = function() {\n            if (this.readyState === 4 && this.status === 200) {\n                console.log(\"RETURNED:\", this.responseText);\n                // const supervisors = JSON.parse(this.responseText);\n                // onValueChanged(\"supervisors\", supervisors);\n            }\n        }\n        request.open(\"POST\", \"http://itu1.epizy.com/php/backend_api.php\", true);\n        console.log('SEND REQUEST: {\"action\":\"login\",\"arguments\":{\"email\":\"example@ex.com\",\"password\":\"Hackthis\"}}');\n        request.send('{\"action\":\"login\",\"arguments\":{\"email\":\"example@ex.com\",\"password\":\"Hackthis\"}}');\n    }\n\n    render() {\n        const { loggedUser, page} = this.state;\n\n        console.log(this.state);\n        return (\n            <div className=\"App\">\n                {!loggedUser ? <Login id=\"login\" appOnValueChanged={this.onValueChanged} />\n                : <>\n                    <div>\n                        <AppBar position=\"static\">\n                            <Tabs aria-label=\"menu\"\n                                onChange={(event, value) => this.onValueChanged(\"page\", value)}\n                                value={page}\n                            >\n                                <Tab label={<span className=\"my-button\">Transactions</span>} />\n                                <Tab label={<span className=\"my-button\">Contacts</span>} />\n                                <Tab label={<span className=\"my-button\">Supervisors</span>} />\n                            </Tabs>\n                        </AppBar>\n                        <UserPanel appOnValueChanged={this.onValueChanged} loggedUser={loggedUser} />\n                    </div>\n                    <header className=\"App-page\">\n                        <div className=\"App-content\">\n                            { page === menu.TRANSACTIONS && <Transactions transactions={loggedUser.transactions} loggedUser={loggedUser} appOnValueChanged={this.onValueChanged} /> }\n                            { page === menu.CONTACTS && <Contacts contacts={loggedUser.contacts} loggedUser={loggedUser} appOnValueChanged={this.onValueChanged} /> }\n                            { page === menu.SUPERVISORS && <Supervisors supervisors={loggedUser.supervisors} loggedUser={loggedUser} appOnValueChanged={this.onValueChanged} /> }\n                        </div>\n                    </header>\n                </>}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}